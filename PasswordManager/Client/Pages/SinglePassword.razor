@page "/mypassword"
@page "/mypassword/{id:int}"
@using PasswordManager.Shared;
@inject IAccountService AccountService
@inject IAccessService AccessService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>Create a new password</PageTitle>
    <MudText Typo="Typo.h3" Class="mt-6">Create a new password</MudText>
}
else
{
    <PageTitle>Edit @account.Login</PageTitle>
    <MudText Typo="Typo.h3" Class="mt-6">Edit @account.Login</MudText>
}

<EditForm Model="account" OnValidSubmit="HandleSubmit" Class="mb-2">
    <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Login" @bind-Value="account.Login" For="@(() => account.Login)"/>
                <MudTextField Label="Password" @bind-Value="account.Password" For="@(() => account.Password)"/>
                <MudTextField Label="URL" @bind-Value="account.URL" For="@(() => account.URL)"/>
                <MudTextField Label="Comment" @bind-Value="account.Comment" For="@(() => account.Comment)"/>
            </MudCardContent>
        </MudCard>
        <MudButton ButtonType="ButtonType.Submit" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary">
        @(Id == null ? "Save New Password" : "Update Password")
        </MudButton>
        @if (Id != null)
        {
            <MudButton @onclick="DeleteAccount" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Secondary">
                Delete Password
            </MudButton>
        }
</EditForm>

@if (Id != null)
{
    <MudText Typo="Typo.h6" Class="mt-6">Available to users:</MudText>
}

<MudTable Class="mt-2 mb-2" Items="AccessService.Users" Hover="true" FixedHeader="true" Height="80vh">
    <HeaderContent>
        <MudTh>UserName</MudTh>
        <MudTh>Email</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Delete">
            <MudIconButton OnClick="(() => DeleteUser(context.Id, (int)Id))"
                           Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Secondary"
                           Variant="Variant.Filled">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<EditForm Model="user" OnValidSubmit="AddUser" Class="mb-2">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="UserName" @bind-Value="user.UserName" For="@(() => user.UserName)" />
        </MudCardContent>
    </MudCard>
    <MudButton ButtonType="ButtonType.Submit" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary">
        Add User
    </MudButton>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    public string userName { get; set; }

    Account account = new Account();
    ApplicationUser user = new ApplicationUser();

    protected override async Task OnInitializedAsync()
    {
        await AccessService.GetUsers((int)Id);
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id is not null)
        {
            var result = await AccountService.GetAccount((int)Id);
            if (result is not null)
                account = result;
            else
                NavigationManager.NavigateTo("/");
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await AccountService.PostAccount(account);

        }
        else
        {
            await AccountService.PutAccount((int)Id, account);
        }
    }

    async Task DeleteAccount()
    {
        await AccountService.DeleteAccount(account.Id);
    }

    async Task AddUser()
    {
        int counter = 0;
        foreach (var user in account.Users)
        {
            if (user.UserName == userName)
            {
                counter++;   
            }
        }
        if (Id == null || counter != 0)
        {
            //предупреждение об ошибке
        }
        else
        {
            await AccessService.AddUser((int)Id, user);
        }
    }

    async Task DeleteUser(string userId, int accountId)
    {
        await AccessService.DeleteUser(userId, accountId);
    }
}
