@page "/mypassword"
@page "/mypassword/{id:int}"
@using PasswordManager.Shared;
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>Create a new account</PageTitle>
    <h3>Create a new account</h3>
}
else
{
    <PageTitle>Edit @account.Login</PageTitle>
    <h3>Edit @account.Login</h3>
}

<EditForm Model="account" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Login" @bind-Value="account.Login" For="@(() => account.Login)"/>
                <MudTextField Label="Password" @bind-Value="account.Password" For="@(() => account.Password)"/>
                <MudTextField Label="URL" @bind-Value="account.URL" For="@(() => account.URL)"/>
                <MudTextField Label="Comment" @bind-Value="account.Comment" For="@(() => account.Comment)"/>
            </MudCardContent>
        </MudCard>
        <MudButton ButtonType="ButtonType.Submit" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary">
            @(Id == null ? "Save New Account" : "Update Account")
        </MudButton>
        @if (Id != null)
        {
            <MudButton @onclick="DeleteAccount" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary">
                Delete Account
            </MudButton>
        }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Account account = new Account();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Account" : "Update Account";
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id is not null)
        {
            var result = await AccountService.GetAccount((int)Id);
            if (result is not null)
                account = result;
            else
                NavigationManager.NavigateTo("/mypasswords");
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await AccountService.PostAccount(account);

        }
        else
        {
            await AccountService.PutAccount((int)Id, account);
        }
    }

    async Task DeleteAccount()
    {
        await AccountService.DeleteAccount(account.Id);
    }
}
