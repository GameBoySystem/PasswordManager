@page "/"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<MudTable Items="AccountService.Accounts" Hover="true" Class="mt-8 mb-2">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Account, object>(x=>x.Login)">Login</MudTableSortLabel></MudTh>
        <MudTh>Password</MudTh>
        <MudTh>URL</MudTh>
        <MudTh>Comment</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Login">@context.Login</MudTd>
        <MudTd DataLabel="Password">@context.Password</MudTd>
        <MudTd DataLabel="URL">@context.URL</MudTd>
        <MudTd DataLabel="Comment">@context.Comment</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton OnClick="(() => ShowAccount(context.Id))"
                Icon="@Icons.Material.Filled.Edit"
                Color="Color.Primary"
                Variant="Variant.Filled">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudButton @onclick="CreateAccount" Variant="Variant.Filled" Color="Color.Primary">Create New Password</MudButton>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            await AccountService.GetAccount();
        }
        else
        {
            NavigationManager.NavigateTo("/authentication/login");
        }
    }

    void ShowAccount(int id)
    {
        NavigationManager.NavigateTo($"mypassword/{id}");
    }

    void CreateAccount()
    {
        NavigationManager.NavigateTo("/mypassword");
    }
}
